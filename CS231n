{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10312176,"sourceType":"datasetVersion","datasetId":6383797}],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-27T13:48:15.618762Z","iopub.execute_input":"2024-12-27T13:48:15.619081Z","iopub.status.idle":"2024-12-27T13:48:15.627441Z","shell.execute_reply.started":"2024-12-27T13:48:15.619056Z","shell.execute_reply":"2024-12-27T13:48:15.626385Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/mnist-digit-recognizer/Digit_Recognizer/sample_submission.csv\n/kaggle/input/mnist-digit-recognizer/Digit_Recognizer/train.csv\n/kaggle/input/mnist-digit-recognizer/Digit_Recognizer/test.csv\n","output_type":"stream"}],"execution_count":15},{"cell_type":"markdown","source":"# Nearest Neighbor\n# K- NN\n# Linear Classifier\n# SVM\n# Neural Network","metadata":{}},{"cell_type":"code","source":"dataset = pd.read_csv(\"/kaggle/input/mnist-digit-recognizer/Digit_Recognizer/train.csv\")\nXte = pd.read_csv(\"/kaggle/input/mnist-digit-recognizer/Digit_Recognizer/test.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T14:01:45.801601Z","iopub.execute_input":"2024-12-27T14:01:45.801981Z","iopub.status.idle":"2024-12-27T14:01:49.467560Z","shell.execute_reply.started":"2024-12-27T14:01:45.801952Z","shell.execute_reply":"2024-12-27T14:01:49.466414Z"}},"outputs":[],"execution_count":47},{"cell_type":"code","source":"ytr = dataset.label\nXtr = dataset.drop(\"label\", axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T15:22:16.283292Z","iopub.execute_input":"2024-12-27T15:22:16.283667Z","iopub.status.idle":"2024-12-27T15:22:16.398338Z","shell.execute_reply.started":"2024-12-27T15:22:16.283618Z","shell.execute_reply":"2024-12-27T15:22:16.397586Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimg1 = Xtr.iloc[40000, :].values.reshape(28, 28)\nplt.imshow(img1, cmap='gray')\nplt.title(f\"{ytr[10]}\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T15:22:17.556994Z","iopub.execute_input":"2024-12-27T15:22:17.557435Z","iopub.status.idle":"2024-12-27T15:22:17.803977Z","shell.execute_reply.started":"2024-12-27T15:22:17.557408Z","shell.execute_reply":"2024-12-27T15:22:17.802972Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":14},{"cell_type":"code","source":"class NearestNeighbor(object):\n    def __init__(self):\n        pass\n\n    def train(self, X, y):\n        self.Xtr = X\n        self.ytr = y\n\n    def predict(self, X):\n        num_test = X.shape[0]\n        y_predict = np.zeros(num_test)\n        for i in range(num_test):\n            distances_l1 = np.sum(np.abs(self.Xtr - X[i, :]), axis=1)\n            # distances_l2 = np.sqrt(np.sum(np.square(self.Xtr - X[i, :]), axis =1))\n            min_index = np.argmin(distances_l1)\n\n            y_predict[i] = self.ytr[min_index]\n        return y_predict","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T14:08:18.524989Z","iopub.execute_input":"2024-12-27T14:08:18.525323Z","iopub.status.idle":"2024-12-27T14:08:18.531878Z","shell.execute_reply.started":"2024-12-27T14:08:18.525296Z","shell.execute_reply":"2024-12-27T14:08:18.530580Z"}},"outputs":[],"execution_count":64},{"cell_type":"code","source":"Xtr = dataset.iloc[:5000, 1:].to_numpy()\nytr = dataset.iloc[:5000, 0].to_numpy()\n\nXte = dataset.iloc[5000:7000, 1:].to_numpy()\nyte = dataset.iloc[5000:7000, 0].to_numpy()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T15:29:05.030836Z","iopub.execute_input":"2024-12-27T15:29:05.031167Z","iopub.status.idle":"2024-12-27T15:29:05.036740Z","shell.execute_reply.started":"2024-12-27T15:29:05.031144Z","shell.execute_reply":"2024-12-27T15:29:05.035763Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"nn = NearestNeighbor()\nnn.train(Xtr, ytr)\ny_predict = nn.predict(Xte)\n\naccuracy = np.mean(y_predict == yte)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T14:16:17.516617Z","iopub.execute_input":"2024-12-27T14:16:17.517029Z","iopub.status.idle":"2024-12-27T14:17:19.873748Z","shell.execute_reply.started":"2024-12-27T14:16:17.516997Z","shell.execute_reply":"2024-12-27T14:17:19.872289Z"}},"outputs":[],"execution_count":75},{"cell_type":"code","source":"print(accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T15:17:02.129371Z","iopub.execute_input":"2024-12-27T15:17:02.129768Z","iopub.status.idle":"2024-12-27T15:17:02.135147Z","shell.execute_reply.started":"2024-12-27T15:17:02.129736Z","shell.execute_reply":"2024-12-27T15:17:02.134153Z"}},"outputs":[{"name":"stdout","text":"0.929\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"Xte.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T15:19:33.474029Z","iopub.execute_input":"2024-12-27T15:19:33.474314Z","iopub.status.idle":"2024-12-27T15:19:33.479424Z","shell.execute_reply.started":"2024-12-27T15:19:33.474292Z","shell.execute_reply":"2024-12-27T15:19:33.478537Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"(784,)"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"Xte = dataset.iloc[40000, 1:].to_numpy().reshape(1, -1)\nXte.shape\ny_predict = nn.predict(Xte)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T15:21:47.253051Z","iopub.execute_input":"2024-12-27T15:21:47.253493Z","iopub.status.idle":"2024-12-27T15:21:47.294290Z","shell.execute_reply.started":"2024-12-27T15:21:47.253462Z","shell.execute_reply":"2024-12-27T15:21:47.293525Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"y_predict","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T15:21:52.494437Z","iopub.execute_input":"2024-12-27T15:21:52.494858Z","iopub.status.idle":"2024-12-27T15:21:52.501575Z","shell.execute_reply.started":"2024-12-27T15:21:52.494830Z","shell.execute_reply":"2024-12-27T15:21:52.500584Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"array([2.])"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=1, metric='manhattan') \nknn.fit(Xtr, ytr)\nYpred = knn.predict(Xte)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T15:29:28.790935Z","iopub.execute_input":"2024-12-27T15:29:28.791247Z","iopub.status.idle":"2024-12-27T15:29:35.924413Z","shell.execute_reply.started":"2024-12-27T15:29:28.791224Z","shell.execute_reply":"2024-12-27T15:29:35.923552Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"accuracy = np.mean(Ypred == yte)\nprint(accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T15:31:05.949824Z","iopub.execute_input":"2024-12-27T15:31:05.950145Z","iopub.status.idle":"2024-12-27T15:31:05.955839Z","shell.execute_reply.started":"2024-12-27T15:31:05.950121Z","shell.execute_reply":"2024-12-27T15:31:05.954865Z"}},"outputs":[{"name":"stdout","text":"0.929\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"W = np.random.rand(10, 784)\nx = dataset.iloc[41, 1:].to_numpy()\ny = dataset.iloc[41, 0]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T16:15:34.484717Z","iopub.execute_input":"2024-12-27T16:15:34.485009Z","iopub.status.idle":"2024-12-27T16:15:34.490296Z","shell.execute_reply.started":"2024-12-27T16:15:34.484987Z","shell.execute_reply":"2024-12-27T16:15:34.489235Z"}},"outputs":[],"execution_count":50},{"cell_type":"code","source":"\nscore = W.dot(x)\n\nD = W.shape[0]\nloss = 0\nfor i in range(D):\n    if i == y :\n        continue\n    # loss += np.max(0, score[i] - score[y] + 1)\n    loss += max(0, score[i] - score[y] + 1)\n\n\nprint(loss)\nprint(score[y])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T16:15:41.780857Z","iopub.execute_input":"2024-12-27T16:15:41.781187Z","iopub.status.idle":"2024-12-27T16:15:41.788068Z","shell.execute_reply.started":"2024-12-27T16:15:41.781164Z","shell.execute_reply":"2024-12-27T16:15:41.787218Z"}},"outputs":[{"name":"stdout","text":"1718.726513673686\n7370.554352274111\n","output_type":"stream"}],"execution_count":54},{"cell_type":"code","source":"img = W[0].reshape(28, 28)\nplt.imshow(img, cmap='gray')\nplt.title(\"Test\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T16:15:40.202783Z","iopub.execute_input":"2024-12-27T16:15:40.203085Z","iopub.status.idle":"2024-12-27T16:15:40.423275Z","shell.execute_reply.started":"2024-12-27T16:15:40.203064Z","shell.execute_reply":"2024-12-27T16:15:40.422428Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":53},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T16:04:49.759014Z","iopub.execute_input":"2024-12-27T16:04:49.759369Z","iopub.status.idle":"2024-12-27T16:04:49.764443Z","shell.execute_reply.started":"2024-12-27T16:04:49.759345Z","shell.execute_reply":"2024-12-27T16:04:49.763563Z"}},"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"(784,)"},"metadata":{}}],"execution_count":33},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}